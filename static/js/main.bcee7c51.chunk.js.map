{"version":3,"sources":["Components/ComponentA.js","Components/ComponentD.js","Components/ComponentB.js","Components/ComponentF.js","Components/ComponentE.js","Components/ComponentC.js","App.js","serviceWorker.js","index.js"],"names":["ComponentA","countContextA","useContext","countContext","onClick","countDispatch","ComponentD","countContextD","ComponentB","ComponentF","countContextF","ComponentE","ComponentC","React","createContext","reducer11","stateValue","action","console","log","App","useReducer","countValue","dispatch","Provider","value","countState","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kKAiBeA,MAbf,WAEE,IAAMC,EAAgBC,qBAAWC,GACjC,OACE,2CAEE,4BAAQC,QAAS,kBAAIH,EAAcI,cAAc,eAAjD,aACA,4BAAQD,QAAS,kBAAIH,EAAcI,cAAc,eAAjD,aACA,4BAAQD,QAAS,kBAAIH,EAAcI,cAAc,WAAjD,WCKSC,MAbf,WAEE,IAAMC,EAAgBL,qBAAWC,GACjC,OACE,2CAEE,4BAAQC,QAAS,kBAAIG,EAAcF,cAAc,eAAjD,aACA,4BAAQD,QAAS,kBAAIG,EAAcF,cAAc,eAAjD,aACA,4BAAQD,QAAS,kBAAIG,EAAcF,cAAc,WAAjD,WCCSG,MATf,WACE,OACE,0CAEE,kBAAC,EAAD,QCSSC,MAbf,WAEE,IAAMC,EAAgBR,qBAAWC,GACjC,OACE,2CAEE,4BAAQC,QAAS,kBAAIM,EAAcL,cAAc,eAAjD,aACA,4BAAQD,QAAS,kBAAIM,EAAcL,cAAc,eAAjD,aACA,4BAAQD,QAAS,kBAAIM,EAAcL,cAAc,WAAjD,WCTS,SAASM,IACpB,OACI,2CAEI,kBAAC,EAAD,OCJG,SAASC,IACpB,OACI,0CAEI,kBAACD,EAAD,OCFJ,IAAMR,EAAeU,IAAMC,gBAG7BC,EAAY,SAACC,EAAWC,GAE5B,OADAC,QAAQC,IAAI,mBACLF,GAEL,IAAK,YACH,OAAOD,EAAa,EACtB,IAAK,YACH,OAAOA,EAAa,EACtB,IAAK,QACH,OAVe,EAWjB,QACE,OAAOA,IAmBEI,MAff,WAAgB,IAAD,EAEiBC,qBAAYN,EAlBvB,GAgBN,mBAENO,EAFM,KAEKC,EAFL,KAGb,OACE,kBAACpB,EAAaqB,SAAd,CAAuBC,MAAO,CAACC,WAAaJ,EAAYjB,cAAekB,IACrE,yBAAKI,UAAU,OAAf,WACSL,EACP,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACV,EAAD,SCpBYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.bcee7c51.chunk.js","sourcesContent":["import React,{useContext} from 'react';\r\nimport { countContext } from '../App';\r\n\r\n\r\nfunction ComponentA() {\r\n\r\n  const countContextA = useContext(countContext)\r\n  return (\r\n    <div>\r\n      Component A\r\n      <button onClick={()=>countContextA.countDispatch('increment')}>Increment</button>\r\n      <button onClick={()=>countContextA.countDispatch('decrement')}>decrement</button>\r\n      <button onClick={()=>countContextA.countDispatch('reset')}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ComponentA;\r\n","import React,{useContext} from 'react';\r\nimport { countContext } from '../App';\r\n\r\n\r\nfunction ComponentD() {\r\n\r\n  const countContextD = useContext(countContext)\r\n  return (\r\n    <div>\r\n      Component D\r\n      <button onClick={()=>countContextD.countDispatch('increment')}>Increment</button>\r\n      <button onClick={()=>countContextD.countDispatch('decrement')}>decrement</button>\r\n      <button onClick={()=>countContextD.countDispatch('reset')}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ComponentD;\r\n","import React from 'react';\r\nimport ComponentD from './ComponentD';\r\n\r\n\r\nfunction ComponentB() {\r\n  return (\r\n    <div >\r\n      ComponentB \r\n      <ComponentD/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ComponentB;\r\n","import React,{useContext} from 'react';\r\nimport { countContext } from '../App';\r\n\r\n\r\nfunction ComponentF() {\r\n\r\n  const countContextF = useContext(countContext)\r\n  return (\r\n    <div>\r\n      Component F\r\n      <button onClick={()=>countContextF.countDispatch('increment')}>Increment</button>\r\n      <button onClick={()=>countContextF.countDispatch('decrement')}>decrement</button>\r\n      <button onClick={()=>countContextF.countDispatch('reset')}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ComponentF;\r\n","import React from 'react'\r\nimport ComponentF from './ComponentF';\r\n\r\nexport default function ComponentE() {\r\n    return (\r\n        <div>\r\n            Component E\r\n            <ComponentF/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ComponentE from './ComponentE';\r\n\r\nexport default function ComponentC() {\r\n    return (\r\n        <div>\r\n            ComponentC\r\n            <ComponentE/>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useReducer} from 'react';\nimport ComponentA from './Components/ComponentA';\nimport ComponentB from './Components/ComponentB';\nimport ComponentC from './Components/ComponentC';\n\nexport  const countContext = React.createContext()\n\nconst initialState = 0\nconst reducer11 = (stateValue,action) =>{\n  console.log('function called')\n  switch(action)\n  {\n    case 'increment':\n      return stateValue + 1;\n    case 'decrement':\n      return stateValue - 1;\n    case 'reset':\n      return initialState;\n    default:\n      return stateValue\n  }\n}\n\nfunction App() {\n\n  const [countValue,dispatch] = useReducer( reducer11, initialState )\n  return (\n    <countContext.Provider value={{countState : countValue, countDispatch: dispatch}}>\n      <div className=\"App\">\n      Count - {countValue }\n        <ComponentA/>\n        <ComponentB/>\n        <ComponentC/>\n      </div>\n    </countContext.Provider>  \n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}